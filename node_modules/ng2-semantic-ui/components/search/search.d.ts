import { ElementRef, AfterViewInit, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { SuiDropdownMenu } from "../dropdown/dropdown-menu";
import { SuiDropdown } from "../dropdown/dropdown";
export declare class SuiSearch extends SuiDropdown implements AfterViewInit {
    protected _menu: SuiDropdownMenu;
    searchClasses: boolean;
    placeholder: string;
    searchDelay: number;
    icon: boolean;
    optionsField: string;
    selectedOption: any;
    selectedOptionChange: EventEmitter<any>;
    onItemSelected: EventEmitter<any>;
    protected _options: Array<any>;
    protected _optionsLookup: ((query: string) => Promise<any>);
    protected _allowEmptyQuery: boolean;
    protected _query: string;
    protected _queryTimer: any;
    protected _results: Array<any>;
    protected _resultsCache: any;
    protected _loading: boolean;
    options: any;
    protected query: string;
    protected readonly results: Array<any>;
    constructor(el: ElementRef);
    protected search(callback?: Function): void;
    private result(i);
    protected deepValue(object: any, path: string): any;
    readValue(object: any): any;
    select(result: any): void;
    writeValue(value: any): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    click(event: MouseEvent): boolean;
}
export declare const CUSTOM_VALUE_ACCESSOR: any;
export declare class SuiSearchValueAccessor implements ControlValueAccessor {
    private host;
    onChange: () => void;
    onTouched: () => void;
    constructor(host: SuiSearch);
    writeValue(value: any): void;
    registerOnChange(fn: () => void): void;
    registerOnTouched(fn: () => void): void;
}
export declare const SUI_SEARCH_DIRECTIVES: (typeof SuiSearch | typeof SuiSearchValueAccessor)[];
