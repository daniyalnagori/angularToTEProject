import { ElementRef, TemplateRef, ViewContainerRef, AfterContentInit, QueryList, AfterViewInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { SuiDropdownMenu } from "../dropdown/dropdown-menu";
import { SuiSearch, SuiSearchValueAccessor } from "../search/search";
import { SuiSelectOption, SuiSelectMultiLabel } from "./select-option";
export declare class SuiSelect extends SuiSearch implements AfterContentInit, AfterViewInit {
    private el;
    protected _menu: SuiDropdownMenu;
    protected selectedOptionContainer: ViewContainerRef;
    protected renderedOptions: QueryList<SuiSelectOption>;
    private renderedOptionsSubscriptions;
    protected renderedSelectedOptions: QueryList<SuiSelectMultiLabel>;
    private renderedSelectedOptionsSubscriptions;
    searchClasses: boolean;
    isSearchable: boolean;
    allowMultiple: boolean;
    searchDelay: number;
    protected _loading: boolean;
    placeholder: string;
    selectedOptions: any[];
    maxSelected: number;
    private maxSelectedReached;
    optionTemplate: TemplateRef<any>;
    isOpen: boolean;
    protected readonly results: Array<any>;
    protected readonly availableOptions: Array<any>;
    constructor(el: ElementRef);
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    private renderedOptionsSubscribe();
    private renderedSelectedOptionsSubscribe();
    private renderSelectedItem();
    selectOption(value: any): void;
    deselectOption(option: any): void;
    private focusSearch();
    private focusFirstItem();
    writeValue(value: any): void;
    click(event: MouseEvent): boolean;
    searchKeyDown(event: KeyboardEvent): void;
}
export declare const CUSTOM_VALUE_ACCESSOR: any;
export declare class SuiSelectValueAccessor extends SuiSearchValueAccessor implements ControlValueAccessor {
    constructor(host: SuiSelect);
}
export declare const SUI_SELECT_DIRECTIVES: (typeof SuiSelectOption | typeof SuiSelect | typeof SuiSelectValueAccessor)[];
