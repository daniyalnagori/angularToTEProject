import { EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class SuiCheckbox {
    classes: boolean;
    name: string;
    private checked;
    checkChange: EventEmitter<boolean>;
    isDisabled: boolean;
    isReadonly: boolean;
    private readonly checkedAttribute;
    private readonly isDisabledAttribute;
    onClick(): void;
    toggle(): void;
    writeValue(value: boolean): void;
}
export declare const CUSTOM_VALUE_ACCESSOR: any;
export declare class SuiCheckboxValueAccessor implements ControlValueAccessor {
    private host;
    onChange: () => void;
    onTouched: () => void;
    constructor(host: SuiCheckbox);
    writeValue(value: any): void;
    registerOnChange(fn: () => void): void;
    registerOnTouched(fn: () => void): void;
}
export declare const SUI_CHECKBOX_DIRECTIVES: (typeof SuiCheckbox | typeof SuiCheckboxValueAccessor)[];
